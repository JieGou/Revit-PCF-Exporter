using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using MoreLinq;
using Autodesk.Revit.DB;
using Autodesk.Revit.DB.Plumbing;
using Autodesk.Revit.DB.Structure;
using Autodesk.Revit.DB.Mechanical;
using Autodesk.Revit.UI;
using CIINExporter.BuildingCoder;

using static CIINExporter.MepUtils;
using static CIINExporter.Debugger;
using static CIINExporter.Enums;

namespace CIINExporter
{
    public class ModelData
    {
        public StringBuilder _01_VERSION { get; set; } = new StringBuilder();
        public StringBuilder _02_CONTROL { get; set; } = new StringBuilder();
        public StringBuilder _03_ELEMENTS { get; set; } = new StringBuilder();
        public StringBuilder _04_AUXDATA { get; } = new StringBuilder("#$ AUX_DATA\n");
        public StringBuilder _05_NODENAME { get; set; } = new StringBuilder();
        public StringBuilder _06_BEND { get; set; } = new StringBuilder();
        public StringBuilder _07_RIGID { get; set; } = new StringBuilder();
        public StringBuilder _08_EXPJT { get; set; } = new StringBuilder();
        public StringBuilder _09_RESTRANT { get; set; } = new StringBuilder();
        public StringBuilder _10_DISPLMNT { get; set; } = new StringBuilder();
        public StringBuilder _11_FORCMNT { get; set; } = new StringBuilder();
        public StringBuilder _12_UNIFORM { get; set; } = new StringBuilder();
        public StringBuilder _13_WIND { get; set; } = new StringBuilder();
        public StringBuilder _14_OFFSETS { get; set; } = new StringBuilder();
        public StringBuilder _15_ALLOWBLS { get; set; } = new StringBuilder();
        public StringBuilder _16_SIFTEES { get; set; } = new StringBuilder();
        public StringBuilder _17_REDUCERS { get; set; } = new StringBuilder();
        public StringBuilder _18_FLANGES { get; set; } = new StringBuilder();
        public StringBuilder _19_EQUIPMNT { get; set; } = new StringBuilder();
        public StringBuilder _20_MISCEL_1 { get; set; } = new StringBuilder();
        public StringBuilder _21_UNITS { get; set; } = new StringBuilder();
        public StringBuilder _22_COORDS { get; set; } = new StringBuilder();

        public AnalyticModel Data;

        public ModelData(AnalyticModel Model)
        {
            Data = Model;
        }

        public void ProcessData()
        {
            _01_VERSION = Section_VERSION();
            _02_CONTROL = Section_CONTROL(Data);
        }

        //CII VERSION section
        internal static StringBuilder Section_VERSION()
        {
            string bl = "                                                                             ";

            StringBuilder sb = new StringBuilder();
            sb.AppendLine("#$ VERSION ");
            sb.AppendLine("    5.00000      10.0000        1252");
            sb.AppendLine("    PROJECT:                                                                 ");
            sb.AppendLine(bl);
            sb.AppendLine("    CLIENT :                                                                 ");
            sb.AppendLine(bl);
            sb.AppendLine("    ANALYST:                                                                 ");
            sb.AppendLine(bl);
            sb.AppendLine("    NOTES  :                                                                 ");
            for (int i = 0; i < 52; i++) sb.AppendLine(bl);
            sb.AppendLine("   Data generated by Revit Addin: revit-cii-neutral-exporter (GitHub)        ");
            return sb;
        }

        internal static StringBuilder Section_CONTROL(AnalyticModel model)
        {
            StringBuilder sb = new StringBuilder();
            string twox = "  ";

            //Gather data
            int numberOfReducers = model.AllAnalyticElements.Count(x => x.Type == ElemType.Transition);
            int numberOfElbows = model.AllAnalyticElements.Count(x => x.Type == ElemType.Elbow);
            int numberOfRigids = model.AllAnalyticElements.Count(x => x.Type == ElemType.Rigid);
            int numberOfTees = model.AllAnalyticElements.Count(x => x.Type == ElemType.Tee);

            sb.AppendLine("#$ CONTROL");

            //Start of a new line
            sb.Append(twox);

            //NUMELT - number of "piping" (every element with DX, DY, DZ) elements
            sb.Append(INT(model.AllAnalyticElements.Count, 13));

            //NUMNOZ - number of nozzles
            sb.Append(INT(0, 13));

            //NOHGRS - number of hangers
            sb.Append(INT(0, 13));

            //NONAM - number of Node Name data blocks (A node can be given a name besides number)
            sb.Append(INT(0, 13));

            //NORED - number of reducers
            sb.Append(INT(numberOfReducers, 13));

            //NUMFLG - number of flanges (I think they mean flange checks)
            sb.Append(INT(0, 13));

            //NEWLINE
            sb.AppendLine();
            sb.Append(twox);

            //BEND - number of bends
            sb.Append(INT(numberOfElbows, 13));

            //RIGID - number of rigids
            sb.Append(INT(numberOfRigids, 13));

            //EXPJT - number of expansion joints
            sb.Append(INT(0, 13));

            //RESTRANT - number of restraints aux blocks
            sb.Append(INT(0, 13));

            //DISPLMNT - number of displacements
            sb.Append(INT(0, 13));

            //FORCMNT - number of force/moments
            sb.Append(INT(0, 13));

            //NEWLINE
            sb.AppendLine();
            sb.Append(twox);

            //UNIFORM - number of uniform loads
            sb.Append(INT(0, 13));

            //WIND - number of wind loads
            sb.Append(INT(0, 13));

            //OFFSETS - number of element offsets
            sb.Append(INT(0, 13));

            //ALLOWBLS - number of allowables
            sb.Append(INT(1, 13));

            //SIF&TEES - number of tees
            sb.Append(INT(numberOfTees, 13));

            //IZUP flag - 0 global Y axis vertical and 1 global Z axis vertical
            sb.Append(INT(1, 13)); //Revit works with Z axis vertical, so it is easier to keep it that way

            //NEWLINE
            sb.AppendLine();
            sb.Append(twox);

            //NOZNOM - number of nozzles
            sb.AppendLine(INT(0, 13));

            return sb;
        }

        internal static StringBuilder Section_ELEMENTS(AnalyticModel model)
        {
            StringBuilder sb = new StringBuilder();
            

            foreach (AnalyticElement ae in model.AllAnalyticElements)
            {
                sb.Append(wElement(ae));
            }

            return sb;
        }

        internal static StringBuilder wElement(AnalyticElement ae)
        {
            string twox = "  ";
            StringBuilder sb = new StringBuilder();

            sb.Append(twox);
            sb.Append(FLO(ae.From.Number, 13, 0, 2));

            return sb;
        }

        internal static string INT(int number, int fieldWidth)
        {
            string input = number.ToString();
            string result = string.Empty;
            for (int i = 0; i < fieldWidth - input.Length; i++)
            {
                result += " ";
            }
            return result += input;
        }

        internal static string FLO<T>(T number, int fieldWidth, int significantDecimals, int numberOfDecimals)
        {
            string result = string.Empty;
            if (number is double dbl)
            {
                result = dbl.Round(significantDecimals).ToString();
                int nrOfDigits = dbl.NrOfDigits();
                if (nrOfDigits < numberOfDecimals)
                {
                    if (!result.Contains(".")) result += ".";
                    int missingDigits = numberOfDecimals - nrOfDigits;
                    for (int i = 0; i < missingDigits; i++) result += "0";
                }
            }
            else if (number is int a)
            {
                result = a.ToString();
                if (numberOfDecimals > 0)
                {
                    result += ".";
                    for (int i = 0; i < numberOfDecimals; i++) result += "0";
                }
            }
            else throw new NotImplementedException();

            int delta = fieldWidth - result.Length;

            if (delta > 0) result.PadLeft(fieldWidth);
            else if (delta == 0) return result;
            else if (delta < 0) throw new Exception("Field width less than value provided!");

            return result;
        }
    }
}
